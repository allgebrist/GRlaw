// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cumulative_frequency
// Function cumulative_frequency Rcpp::List cumulative_frequency(Rcpp::NumericVector& magnitudes);
RcppExport SEXP _GRlaw_cumulative_frequency(SEXP magnitudesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type magnitudes(magnitudesSEXP);
    rcpp_result_gen = Rcpp::wrap(cumulative_frequency(magnitudes));
    return rcpp_result_gen;
END_RCPP
}
// least_squares
// Function least_squares Rcpp::List least_squares(Rcpp::NumericVector& N, Rcpp::NumericVector& M);
RcppExport SEXP _GRlaw_least_squares(SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(least_squares(N, M));
    return rcpp_result_gen;
END_RCPP
}
// maximum_likelihood_estimation
// Function maximum_likelihood_estimation double maximum_likelihood_estimation(Rcpp::NumericVector& magnitudes);
RcppExport SEXP _GRlaw_maximum_likelihood_estimation(SEXP magnitudesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type magnitudes(magnitudesSEXP);
    rcpp_result_gen = Rcpp::wrap(maximum_likelihood_estimation(magnitudes));
    return rcpp_result_gen;
END_RCPP
}
// find_b_value
// Function find_b_value double find_b_value(Rcpp::NumericVector& N, Rcpp::NumericVector& M, std::string method);
RcppExport SEXP _GRlaw_find_b_value(SEXP NSEXP, SEXP MSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type M(MSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(find_b_value(N, M, method));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GRlaw_cumulative_frequency", (DL_FUNC) &_GRlaw_cumulative_frequency, 1},
    {"_GRlaw_least_squares", (DL_FUNC) &_GRlaw_least_squares, 2},
    {"_GRlaw_maximum_likelihood_estimation", (DL_FUNC) &_GRlaw_maximum_likelihood_estimation, 1},
    {"_GRlaw_find_b_value", (DL_FUNC) &_GRlaw_find_b_value, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_GRlaw(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

#include <Rcpp.h>
#include <math.h>
#include <string>
#include <algorithm>

// Inline function to take base 10 logarithm
inline double common_logarithm(double x) { 
  return ::log10(x);
}


//' Fit the frequency-magnitude plot using linear least squares
//'
//'
//' @param N A numeric vector containing the number of earthquakes of magnitude M or greater.
//' @param M A numeric vector containing the earthquake magnitudes from a given catalog.
//' @return A list containing the productivity parameter \eqn{a} and the \eqn{b}-value. 
//' @export
//' @examples
//' catalog <- read.csv(file="./data/terremoti_ultimi_7_giorni.csv", header = TRUE, sep = ",")
//' magnitudes <- catalog$Magnitude
//' freq <- cumulative_frequency(magnitudes)
//' least_squares(freq$count, freq$magnitude)
//'
//' 
// [[Rcpp::export]]
// Function least_squares
Rcpp::List least_squares(Rcpp::NumericVector& N, Rcpp::NumericVector& M) {
  Rcpp::List line; 
  
  Rcpp::NumericVector X = M;
  Rcpp::NumericVector Y(N.size());
  
  // Store the base 10 logarithm of all entries from N(M) into X
  std::transform(N.begin(), N.end(), Y.begin(), common_logarithm);

  // Compute average of X[] and Y[] 
  double X_avg = 0, Y_avg = 0;
  for (int k = 0; k < X.size(); k++) {
    X_avg += X[k];
    Y_avg += Y[k];
  }
  X_avg /= (double) X.size();
  Y_avg /= (double) Y.size();
  
  double top = 0, bottom = 0;
  for (int k = 0; k < X.size(); k++) {
    top += ((X[k] - X_avg) * (Y[k] - Y_avg));
    bottom += ((X[k] - X_avg) * (X[k] - X_avg));
  }
  double b = top / bottom;
  double a = Y_avg - b * X_avg;
  
  line = Rcpp::List::create( Rcpp::Named("a") = a, Rcpp::Named("b_value") = b );
  return line;
}


//' Estimate the b-value with the maximum likelihood method 
//'
//'
//' @param magnitudes A numeric vector containing the earthquake magnitudes from a given catalog.
//' @return The \eqn{b}-value obtained estimated with the maximum likelihood method.
//' @export
//' @examples
//' catalog <- read.csv(file="./data/terremoti_ultimi_7_giorni.csv", header = TRUE, sep = ",")
//' magnitudes <- catalog$Magnitude
//' freq <- cumulative_frequency(magnitudes)
//' maximum_likelihood_estimation(freq$magnitude)
//'
//' 
// [[Rcpp::export]]
// Function maximum_likelihood_estimation
double maximum_likelihood_estimation(Rcpp::NumericVector& magnitudes) {
  double magnitudes_length = (double) magnitudes.size(), magnitudes_avg = 0;
  double magnitudes_min = *std::min_element(magnitudes.begin(), magnitudes.end());
  for (auto x : magnitudes) {
    magnitudes_avg += x;
  }
  magnitudes_avg /= magnitudes_length;
  double mle = log10(exp(1)) / (magnitudes_avg - magnitudes_min);
  return mle;
}


//' Estimate the b-value of an earthquake catalog
//'
//'
//' @param N A numeric vector containing the number of earthquakes of magnitude M or greater.
//' @param M A numeric vector containing the earthquake magnitudes from a given catalog.
//' @param method A string indicating the method to be used for the calculation of the \eqn{b}-value.
//' It can either be \code{"ls"} for linear least squares or \code{"mle"} for the maximum likelihood method.
//' @return The \eqn{b}-value obtained by applying the indicated method
//' @export
//' @examples
//' catalog <- read.csv(file="./data/terremoti_ultimi_7_giorni.csv", header = TRUE, sep = ",")
//' magnitudes <- catalog$Magnitude
//' freq <- cumulative_frequency(magnitudes)
//' find_b_value(freq$count, freq$magnitude, "ls")
//'
//' 
// [[Rcpp::export]]
// Function find_b_value
double find_b_value(Rcpp::NumericVector& N, Rcpp::NumericVector& M, std::string method = "ls") {
  if (method == "ls") {
    // Fit the line log(N(M)) vs M
    Rcpp::Function least_squares("least_squares");
    Rcpp::List line = Rcpp::as<Rcpp::List>( least_squares(N, M) );
    double b_value = line["b_value"];
    return -b_value;
  } else if (method == "mle") {
    // Compute maximum likelihood estimation
    Rcpp::Function maximum_likelihood_estimation("maximum_likelihood_estimation");
    double b_value = Rcpp::as<double>( maximum_likelihood_estimation(M) );
    return b_value;
  } else {
    // Throw error if no valid method is specified
    throw std::invalid_argument("Please specify a valid method.");
  }
  return 0;
}

